package com.eltex.androidschool.repository.auth

import android.content.ContentResolver

import com.eltex.androidschool.api.auth.AuthApi
import com.eltex.androidschool.data.auth.AuthData
import com.eltex.androidschool.store.UserPreferences
import com.eltex.androidschool.data.media.FileModel

import okhttp3.MediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.toRequestBody

import okio.Buffer
import okio.BufferedSink
import okio.IOException

import javax.inject.Inject

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç [AuthApi] –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ [UserPreferences] –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *
 * @property authApi API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.
 * @property userPreferences –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–∫–µ–Ω –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä).
 */
class NetworkAuthRepository @Inject constructor(
    private val authApi: AuthApi,
    private val userPreferences: UserPreferences,
) : AuthRepository {

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É.
     *
     * @param login –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param password –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @return –û–±—ä–µ–∫—Ç [AuthData], —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @throws IOException –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏.
     * @see AuthData
     */
    override suspend fun login(login: String, password: String): AuthData {
        val response: AuthData = authApi.login(
            login = login,
            password = password,
        )

        if (response.token.isNotEmpty()) {
            userPreferences.saveUserCredentials(
                authToken = response.token,
                userId = response.id.toString()
            )
        }

        return response
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ.
     *
     * @param login –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param username –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param password –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param fileModel –ú–æ–¥–µ–ª—å —Ñ–∞–π–ª–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∂–µ—Ç –±—ã—Ç—å `null`, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.
     * @param contentResolver [ContentResolver] –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º.
     * @param onProgress –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.
     * @return –û–±—ä–µ–∫—Ç [AuthData], —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @throws IOException –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏.
     * @see AuthData
     * @see FileModel
     */
    override suspend fun register(
        login: String,
        username: String,
        password: String,
        fileModel: FileModel?,
        contentResolver: ContentResolver,
        onProgress: (Int) -> Unit,
    ): AuthData {
        val response: AuthData = if (fileModel != null) {
            val fileBody = contentResolver.openInputStream(fileModel.uri)?.use { inputStream ->
                val fileBytes = inputStream.readBytes()
                fileBytes.toRequestBody()
            } ?: throw IOException("File not found")

            val requestBody = object : RequestBody() {
                override fun contentType(): MediaType? = fileBody.contentType()

                override fun writeTo(sink: BufferedSink) {
                    val totalBytes = fileBody.contentLength()
                    val buffer = Buffer()
                    var bytesWritten = 0L

                    fileBody.writeTo(buffer)

                    while (!buffer.exhausted()) {
                        val bytesRead = buffer.read(sink.buffer, 16364)
                        bytesWritten += bytesRead
                        val progress = ((bytesWritten.toFloat() / totalBytes) * 100).toInt()

                        onProgress(progress)
                    }
                }

                override fun contentLength(): Long = fileBody.contentLength()
            }

            val part = MultipartBody.Part.createFormData("file", "file", requestBody)

            authApi.register(
                login = login,
                password = password,
                name = username,
                file = part,
            )
        } else {
            authApi.register(
                login = login,
                password = password,
                name = username,
                file = MultipartBody.Part.createFormData("file", "file"),
            )
        }

        if (response.token.isNotEmpty()) {
            userPreferences.saveUserCredentials(
                authToken = response.token,
                userId = response.id.toString()
            )
        }

        return response
    }

    override fun getProhibitedUsernamesAndNicknames(): List<String> =
        listOf(
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            "admin", "–∞–¥–º–∏–Ω", "administrator", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "moderator", "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            "root", "—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "superuser", "sysadmin", "—Å–∏—Å–∞–¥–º–∏–Ω",

            // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            "–∞dmin", "–∞–¥m–∏–Ω", "a–¥–º–∏–Ω", "–∞–¥m–∏n", "–∞–¥–º1–Ω", "–∞d–ºin",
            "adm1n", "4dm1n", "@dm1n", "4dmin", "@dmin",
            "–∞–¥–ºi–Ω", "a–¥–ºi–Ω", "–∞–¥–º!–Ω", "–∞–¥–º*–Ω", "–∞–¥–º_–Ω",

            // –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "a d m i n", "–∞ –¥ –º –∏ –Ω", "a.d.m.i.n", "–∞-–¥-–º-–∏-–Ω",
            "a_d_m_i_n", "–∞_–¥_–º_–∏_–Ω", "a*d*m*i*n", "–∞*–¥*–º*–∏*–Ω",

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä
            "admin1", "admin123", "admin007", "admin777", "admin2023",
            "–∞–¥–º–∏–Ω1", "–∞–¥–º–∏–Ω123", "–∞–¥–º–∏–Ω007", "–∞–¥–º–∏–Ω777", "–∞–¥–º–∏–Ω2023",

            // –ó–∞–º–µ–Ω–∞ –±—É–∫–≤ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
            "@dmin", "@–¥–º–∏–Ω", "4dmin", "4–¥–º–∏–Ω", "adm!n", "–∞–¥–º!–Ω",
            "adm1n", "–∞–¥–º1–Ω", "admi–∏", "a–¥min", "–∞d–º–∏–Ω", "a–¥–ºi–Ω",

            // –û–±—Ä–∞—Ç–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            "nimda", "–Ω–∏–º–¥–∞", "nimd4", "–Ω–∏–º–¥4",

            // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
            "adminaccount", "adminuser", "adminlogin", "adminsystem",
            "–∞–¥–º–∏–Ω–∞–∫–∫–∞—É–Ω—Ç", "–∞–¥–º–∏–Ω—é–∑–µ—Ä", "–∞–¥–º–∏–Ω–ª–æ–≥–∏–Ω", "–∞–¥–º–∏–Ω—Å–∏—Å—Ç–µ–º–∞",

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "admin!", "@admin", "#admin", "\$admin", "%admin", "^admin", "&admin", "*admin",
            "–∞–¥–º–∏–Ω!", "@–∞–¥–º–∏–Ω", "#–∞–¥–º–∏–Ω", "\$–∞–¥–º–∏–Ω", "%–∞–¥–º–∏–Ω", "^–∞–¥–º–∏–Ω", "&–∞–¥–º–∏–Ω", "*–∞–¥–º–∏–Ω",

            // –°–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏
            "a–¥m–∏n", "–∞–¥m1n", "a–¥m1n", "–∞–¥m!n",

            // –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "adm", "admn", "admi", "–∞–¥–º", "–∞–¥–º–Ω", "–∞–¥–º–∏",

            // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–∫–≤
            "aadmin", "a–¥–¥–º–∏–Ω", "admmiin", "–∞–¥–º–º–∏–∏–Ω",

            // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            "xadminx", "xxadminxx", "zzadm1nzz", "–∞–¥–º–∏–Ωxxx", "xxx–∞–¥–º–∏–Ω",

            // –≠–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã
            "üÖ∞Ô∏èadmin", "adminüëë", "–∞–¥–º–∏–Ωüíª", "üõëadminüõë", "üëë–∞–¥–º–∏–Ωüëë",

            // Unicode-–æ–±–º–∞–Ω–∫–∏
            "–∞\u0434–º–∏–Ω", "a\u0064min", "\u0430dmin", "a\u0250min",

            // –†–µ–¥–∫–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
            "4dmi–∏", "@–¥mi–∏", "a–¥m!–∏", "a–¥m!–∏–∏", "a–¥m!–∏–∏–∏"
        )
}
